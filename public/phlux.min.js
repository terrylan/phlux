const Phlux = (() => {
  let config = { apiBase: '/test/phlux/api', errorLog: false };
  let session = new Map();
  let apiCache = {};

  function configFn(options) { Object.assign(config, options); }

  function fetchSync(url) {
    return fetch(config.apiBase + url, { credentials: 'same-origin' })
      .then(res => {
        if (!res.ok) {
          return res.text().then(text => { throw new Error(`HTTP ${res.status}: ${text.slice(0, 50)}...`); });
        }
        return res.json();
      })
      .catch(e => { errorLog(e.message); throw e; });
  }

  function escapeHtml(str) {
    const div = document.createElement('div');
    div.textContent = str ?? '';
    return div.innerHTML;
  }

  const Session = {
    set: (key, value) => {
      session.set(key, value);
      localStorage.setItem('phlux_' + key, JSON.stringify(value));
      updateDOM();
    },
    get: key => {
      const cached = session.get(key);
      if (cached !== undefined) return cached;
      const stored = localStorage.getItem('phlux_' + key);
      return stored !== null ? JSON.parse(stored) : null;
    },
    clear: () => { session.clear(); localStorage.clear(); updateDOM(); }
  };

  const api = {
    scan: async url => {
      try {
        const data = await fetchSync(url + '?phlux_scan=1');
        if (!data || !data.methods) throw new Error('Invalid API scan response');
        data.methods.forEach(m => api[m] = (...args) => fetchSync(`${url}?method=${m}&args=${JSON.stringify(args)}`));
      } catch (e) {
        errorLog(`API scan failed: ${e.message}`);
        throw e;
      }
    }
  };

  function throwError(msg) { throw new Error(msg); }
  function errorLog(msg) { if (config.errorLog) console.error(`[Phlux Error] ${msg}`); }
  function tryCatch(fn) {
    try {
      const result = fn();
      if (result instanceof Promise) {
        return result.catch(e => { errorLog(e.message); throw e; });
      }
      return result;
    } catch (e) {
      errorLog(e.message);
      throw e;
    }
  }

  function updateDOM() {
    console.log('updateDOM called, Session:', {
      username: Session.get('username'),
      posts: Session.get('posts'),
      commentStatus: Session.get('commentStatus')
    });

    // Use Case 1: Username
    const usernameEl = document.getElementById('username');
    if (usernameEl) {
      const username = Session.get('username') || 'Guest';
      usernameEl.innerHTML = escapeHtml(username);
      console.log('Rendering username:', username);
    }

    // Use Case 2: Posts
    const postsEl = document.getElementById('posts');
    if (postsEl) {
      const posts = Session.get('posts');
      let output = '';
      if (posts && Array.isArray(posts)) {
        output = posts.map(post => `<h3>${escapeHtml(post.title)}</h3><p>${escapeHtml(post.content)}</p>`).join('');
      } else {
        output = 'Click below to load posts.';
      }
      postsEl.innerHTML = output;
      console.log('Rendering posts:', output);
    }

    // Use Case 3: Comment Status
    const commentStatusEl = document.getElementById('commentStatus');
    if (commentStatusEl) {
      const commentStatus = Session.get('commentStatus') || 'No comment yet';
      commentStatusEl.innerHTML = escapeHtml(commentStatus);
      console.log('Rendering commentStatus:', commentStatus);
    }
  }

  document.addEventListener('DOMContentLoaded', updateDOM);

  return { config: configFn, fetchSync, Session, api, try: tryCatch, errorLog, throw: throwError };
})();
